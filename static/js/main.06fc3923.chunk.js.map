{"version":3,"sources":["util.ts","components/User/User.tsx","components/Comment/Comment.tsx","components/CommentList/CommentList.tsx","components/Post/Post.tsx","components/PostList/PostList.tsx","App.tsx","index.tsx"],"names":["URL","getUsers","a","fetch","then","response","json","getPosts","getComments","User","props","user","name","email","address","city","street","zipcode","className","Comment","comment","body","CommentList","comments","map","item","key","id","Post","post","title","PostList","postList","App","useState","posts","setPosts","isError","setIsError","isLoading","setIsLoading","query","setQuery","filterQuery","setFilterQuery","visiblePosts","useMemo","initialPosts","filter","pattern","RegExp","trim","test","filterPosts","setFilterQueryWithDebonce","useCallback","debounce","length","value","type","placeholder","onChange","event","target","onClick","Promise","all","usersFromApi","postsFromApi","commentsFromApi","newPosts","find","userId","postId","catch","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.06fc3923.chunk.js","sourcesContent":["const URL = 'https://jsonplaceholder.typicode.com/';\n\nexport async function dataDownload<T>(url: string): Promise<T> {\n  return fetch(url)\n    .then(response => response.json());\n}\n\nexport async function getUsers(): Promise<User[]> {\n  return fetch(URL + 'users')\n    .then(response => response.json());\n}\n\nexport async function getPosts(): Promise<Post[]> {\n  return fetch(URL + 'posts')\n    .then(response => response.json());\n}\n\nexport async function getComments(): Promise<Comment[]> {\n  return fetch(URL + 'comments')\n    .then(response => response.json());\n}\n","import React, { FC } from 'react';\n\ninterface Props {\n  user: User;\n}\n\n\nexport const User: FC<Props> = (props) => {\n  const {\n    user: {\n      name,\n      email,\n      address: {\n        city,\n        street,\n        zipcode,\n      },\n    },\n  } = props;\n\n  return (\n    <div className=\"user\">\n      <p>Autor contacts:</p>\n      <p>{`name: ${name}, email: ${email}`}</p>\n      <p>{`address: ${zipcode}, ${street}, ${city}`}</p>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport './Comment.css';\n\ninterface Props {\n  comment: Comment;\n}\n\nexport const Comment: FC<Props> = ({ comment }) => {\n  const { name, email, body } = comment;\n\n  return (\n    <li className=\"comment\">\n      <p className=\"comment__autor\">\n        <span>{`autor: ${name} `}</span>\n        <span>{`e-mail: ${email}`}</span>\n      </p>\n      <p className=\"comment__text\">{body}</p>\n    </li>\n  );\n};\n","import React, { FC } from 'react';\nimport { Comment } from '../Comment/Comment';\n\ninterface Props {\n  comments: Comment[];\n}\n\nexport const CommentList: FC<Props> = ({ comments }) => {\n  return (\n    <ul className=\"commentList\">\n      {comments.map(item => <Comment key={item.id} comment={item} />)}\n    </ul>\n  );\n};\n","import React, { FC } from 'react';\nimport './Post.css';\nimport { User } from '../User/User';\nimport { CommentList } from '../CommentList/CommentList';\n\ninterface Props {\n  post: PostWithComments\n}\n\nexport const Post: FC<Props> = ({post}) => {\n  const {\n    title, body, user, comments,\n  } = post;\n\n  return (\n    <li className=\"post\">\n      <h3 className=\"post__title\">{title}</h3>\n      <p className=\"post__text\">{body}</p>\n      <User user={user} />\n      <CommentList comments={comments} />\n    </li>\n  );\n};\n","import React, { FC } from 'react';\n\nimport './PostList.css';\nimport { Post } from '../Post/Post';\n\n\ninterface Props {\n  postList: PostWithComments[];\n}\n\nexport const PostList: FC<Props> = ({ postList }) => (\n  <ul className=\"postList\">\n    {postList.map((post) => {\n\n      return (\n        <Post\n          key={post.id}\n          post={post}\n        />\n      );\n    })}\n  </ul>\n);\n\n","import React, {\n  FC, useState, useMemo, ChangeEvent, useCallback,\n} from 'react';\nimport debounce from 'lodash/debounce';\nimport './App.css';\n\nimport { getComments, getUsers, getPosts } from './util';\nimport { PostList } from './components/PostList/PostList';\n\n\n\nconst App: FC = () => {\n  const [posts, setPosts] = useState<PostWithComments[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [query, setQuery] = useState('');\n  const [filterQuery, setFilterQuery] = useState('');\n\n\n  function filterPosts(initialPosts: PostWithComments[], filter: string): PostWithComments[] {\n    const pattern = new RegExp(filter.trim(), 'gi');\n\n    return initialPosts.filter(post => {\n      return pattern.test(post.title) || pattern.test(post.body);\n    });\n  }\n\n  const visiblePosts = useMemo(\n    () => filterPosts(posts, filterQuery),\n    [filterQuery, posts],\n  );\n\n  const setFilterQueryWithDebonce = useCallback(\n    debounce(setFilterQuery, 1000),\n    [],\n  );\n\n  function loadClickHandler() {\n    setIsError(false);\n    setIsLoading(true);\n    Promise.all([\n      getUsers(),\n      getPosts(),\n      getComments(),\n    ]).then(([usersFromApi, postsFromApi, commentsFromApi]) => {\n      setIsLoading(false);\n      const newPosts = postsFromApi.map(post => {\n        return {\n          ...post,\n          user: (usersFromApi.find(item => item.id === post.userId) as User),\n          comments: commentsFromApi.filter(item => item.postId === post.id),\n        };\n      });\n\n      setPosts(newPosts);\n    }).catch(() => {\n      setIsError(true);\n      setIsLoading(false);\n    });\n  }\n\n  function searchHandler(event: ChangeEvent<HTMLInputElement>) {\n    setQuery(event.target.value);\n    setFilterQueryWithDebonce(event.target.value);\n  }\n\n  if (!posts.length) {\n    return (\n      <>\n        <h1>Dynamic list of posts</h1>\n        <button\n          type=\"button\"\n          onClick={loadClickHandler}\n          disabled={isLoading}\n        >\n          Load posts\n        </button>\n        <p>{isLoading ? 'Loading' : ''}</p>\n        <p>{isError ? 'Error occured. Try again later' : ''}</p>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <h1>Dynamic list of posts</h1>\n      <input\n        className=\"search-field\"\n        value={query}\n        type=\"text\"\n        placeholder=\"Enter search query\"\n        onChange={searchHandler}\n      />\n      <div className=\"App\">\n        <PostList postList={visiblePosts} />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}