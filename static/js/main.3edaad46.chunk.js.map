{"version":3,"sources":["util.ts","components/User/User.tsx","components/Comment/Comment.tsx","components/CommentList/CommentList.tsx","components/Post/Post.tsx","components/PostList/PostList.tsx","App.tsx","index.tsx"],"names":["dataDownload","url","a","fetch","then","response","json","User","props","user","name","email","address","city","street","zipcode","className","Comment","comment","body","CommentList","comments","map","item","key","id","Post","title","PostList","postList","post","URL_START","App","useState","posts","setPosts","isError","setIsError","isLoading","setIsLoading","query","setQuery","filterQuery","setFilterQuery","visiblePosts","useMemo","initialPosts","filter","pattern","RegExp","test","filterPosts","setFilterQueryWithDebonce","useCallback","debounce","length","value","type","placeholder","onChange","event","target","onClick","Promise","all","newPosts","find","userId","postId","catch","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3edaad46.chunk.js","sourcesContent":["export async function dataDownload<T>(url: string): Promise<T> {\n  return fetch(url)\n    .then(response => response.json());\n}\n","import React, { FC } from 'react';\n\ninterface Props {\n  user: User;\n}\n\n\nexport const User: FC<Props> = (props) => {\n  const {\n    user: {\n      name,\n      email,\n      address: {\n        city,\n        street,\n        zipcode,\n      },\n    },\n  } = props;\n\n  return (\n    <div className=\"user\">\n      <p>Autor contacts:</p>\n      <p>{`name: ${name}, email: ${email}`}</p>\n      <p>{`address: ${zipcode}, ${street}, ${city}`}</p>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport './Comment.css';\n\ninterface Props {\n  comment: Comment;\n}\n\nexport const Comment: FC<Props> = (props) => {\n  const { comment: { name, email, body } } = props;\n\n  return (\n    <li className=\"comment\">\n      <p className=\"comment__autor\">\n        <span>{`autor: ${name} `}</span>\n        <span>{`e-mail: ${email}`}</span>\n      </p>\n      <p className=\"comment__text\">{body}</p>\n    </li>\n  );\n};\n","import React, { FC } from 'react';\nimport { Comment } from '../Comment/Comment';\n\ninterface Props {\n  comments: Comment[];\n}\n\nexport const CommentList: FC<Props> = ({ comments }) => {\n  return (\n    <ul className=\"commentList\">\n      {comments.map(item => <Comment key={item.id} comment={item} />)}\n    </ul>\n  );\n};\n","import React, { FC } from 'react';\nimport './Post.css';\nimport { User } from '../User/User';\nimport { CommentList } from '../CommentList/CommentList';\n\ninterface Props {\n  title: string;\n  body: string;\n  user: User;\n  comments: Comment[];\n}\n\nexport const Post: FC<Props> = (props) => {\n  const {\n    title, body, user, comments,\n  } = props;\n\n  return (\n    <li className=\"post\">\n      <h3 className=\"post__title\">{title}</h3>\n      <p className=\"post__text\">{body}</p>\n      <User user={user} />\n      <CommentList comments={comments} />\n    </li>\n  );\n};\n","import React, { FC } from 'react';\n\nimport './PostList.css';\nimport { Post } from '../Post/Post';\n\n\ninterface Props {\n  postList: PostWithComments[];\n}\n\nexport const PostList: FC<Props> = ({ postList }) => {\n  return (\n    <ul className=\"postList\">\n      {postList.map((post) => {\n        const {\n          user, comments, id, title, body,\n        } = post;\n\n        return (\n          <Post\n            key={id}\n            title={title}\n            body={body}\n            user={user}\n            comments={comments}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n","import React, {\n  FC, useState, useMemo, ChangeEvent, useCallback,\n} from 'react';\nimport debounce from 'lodash/debounce';\nimport './App.css';\n\nimport { dataDownload } from './util';\nimport { PostList } from './components/PostList/PostList';\n\nconst URL_POSTS = 'posts';\nconst URL_USERS = 'users';\nconst URL_COMMENTS = 'comments';\nconst URL_START = 'https://jsonplaceholder.typicode.com/';\n\nconst App: FC<{}> = () => {\n  const [posts, setPosts] = useState<PostWithComments[]>([]);\n  const [isError, setIsError] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [query, setQuery] = useState<string>('');\n  const [filterQuery, setFilterQuery] = useState<string>('');\n\n\n  function filterPosts(initialPosts: PostWithComments[], filter: string): PostWithComments[] {\n    const pattern = new RegExp(filter, 'gi');\n\n    return initialPosts.filter(post => {\n      return pattern.test(post.title) || pattern.test(post.body);\n    });\n  }\n\n  const visiblePosts = useMemo(\n    () => filterPosts(posts, filterQuery),\n    [filterQuery, posts],\n  );\n\n  const setFilterQueryWithDebonce = useCallback(\n    debounce(setFilterQuery, 1000),\n    [],\n  );\n\n  function loadClickHandler() {\n    setIsError(false);\n    setIsLoading(true);\n    Promise.all([\n      dataDownload<User[]>(URL_START + URL_USERS),\n      dataDownload<Post[]>(URL_START + URL_POSTS),\n      dataDownload<Comment[]>(URL_START + URL_COMMENTS),\n    ]).then(response => {\n      setIsLoading(false);\n      const newPosts = response[1].map(post => {\n        return {\n          ...post,\n          user: (response[0].find(item => item.id === post.userId) as User),\n          comments: response[2].filter(item => item.postId === post.id),\n        };\n      });\n\n      setPosts(newPosts);\n    }).catch(() => {\n      setIsError(true);\n      setIsLoading(false);\n    });\n  }\n\n  function searchHandler(event: ChangeEvent<HTMLInputElement>) {\n    setQuery(event.target.value);\n    setFilterQueryWithDebonce(event.target.value);\n  }\n\n  if (!posts.length) {\n    return (\n      <>\n        <h1>Dynamic list of posts</h1>\n        <button\n          type=\"button\"\n          onClick={loadClickHandler}\n          disabled={isLoading}\n        >\n          Load posts\n        </button>\n        <p>{isLoading ? 'Loading' : ''}</p>\n        <p>{isError ? 'Error occured. Try again later' : ''}</p>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <h1>Dynamic list of posts</h1>\n      <input\n        className=\"search-field\"\n        value={query}\n        type=\"text\"\n        placeholder=\"Enter title or body\"\n        onChange={searchHandler}\n      />\n      <div className=\"App\">\n        <PostList postList={visiblePosts} />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}